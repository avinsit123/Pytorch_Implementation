#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Nov  3 14:11:48 2018

@author: r17935avinash
"""
from keras.datasets import cifar10
import torch
from torchvision import models
from torch.optim import Adam
import time
import os
import cv2
import numpy as np
import matplotlib.pyplot as plt

(X_train,y_train),(X_test,y_test)=cifar10.load_data()

batch_size=int(6000/128)
epochs=5

def model_accuracy(model,X,y):
    pred=model(X.float())
    total=0
    correct=0
    _, predicted = torch.max(pred.data, 1)
    total += y.size(0)
    correct += (predicted == y.long()).sum().item()
    return (correct/total)*100

def resize(X):
    lmao=np.zeros((6000,224,224,3))
    for i in range(6000):
        lmao[i,:,:]=cv2.resize(X[i],(224,224))
    return torch.from_numpy(lmao)
        

X_train=resize(X_train)
X_test=resize(X_test)
y_train=torch.from_numpy(y_train)
y_test=torch.from_numpy(y_test)

###Performing transfer learning 
model=models.resnet18(pretrained=True)
for param in model.parameters():
    param.requires_grad=False
    
num_ftr=model.fc.in_features
model.fc=torch.nn.Linear(num_ftr,10)

criterion=torch.nn.CrossEntropyLoss()
optimizer=Adam(model.parameters(),lr=0.001)

for i in range(epochs):
    
    
    
    for current in range(128):
        since=time.time()
        temp_train=X_train[current*(batch_size):(current+1)*batch_size]
        temp_label=y_train[current*(batch_size):(current+1)*batch_size]
        output=model(temp_train.float())
        model.zero_grad()
        loss=criterion(output,temp_label.long())
        loss.backward()
        optimizer.step()
    print("Epoch::",i+1)
    print("Training Loss after epoch",i+1,"is ",loss.item())
    print("Training model accuracy is ",model_accuracy(model,X_train,y_train))
    print("Test model accuracy is ",model_accuracy(model,X_test,y_test))
    print("Time taken is",time.time()-since)
    print("___________________________________________________")
    
for i in range(5):
    plt.imshow(X_test[i].reshape(28,28))
    result=model(X_test[i].float())
    result=result.data.numpy()
    print("The Digit is",np.argmax(result))
    plt.show()