#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Nov  2 22:24:35 2018

@author: r17935avinash
"""

import torch 
from keras.datasets import mnist


batch_size=int(60000/128)
epochs=20

def convert(X):
    X=X.reshape(X.shape[0],784)
    return torch.from_numpy(X)


def model_accuracy(model,X,y):
    pred=model(X.float())
    total=0
    correct=0
    _, predicted = torch.max(pred.data, 1)
    total += y.size(0)
    correct += (predicted == y.long()).sum().item()
    return (correct/total)*100
    

model=torch.nn.Sequential(
        torch.nn.Linear(784,256),
        torch.nn.ReLU(),
        torch.nn.Linear(256,10))



(X_train,y_train),(X_test,y_test)=mnist.load_data()

X_train=convert(X_train)
X_test=convert(X_test)
y_train=torch.from_numpy(y_train)
y_test=torch.from_numpy(y_test)


criterion=torch.nn.CrossEntropyLoss()
optimizer=torch.optim.Adam(model.parameters(),lr=0.001)

for i in range(epochs+1):
    
    
    
    for current in range(128):
        temp_train=X_train[current*(batch_size):(current+1)*batch_size]
        temp_label=y_train[current*(batch_size):(current+1)*batch_size]
        output=model(temp_train.float())
        model.zero_grad()
        loss=criterion(output,temp_label.long())
        loss.backward()
        optimizer.step()
    print("Epoch::",i)
    print("Training Loss after epoch",i,"is ",loss.item())
    print("Training model accuracy is ",model_accuracy(model,X_train,y_train))
    print("Test model accuracy is ",model_accuracy(model,X_test,y_test))
    print("___________________________________________________")
    
    
    


    
    
    
    
    
    